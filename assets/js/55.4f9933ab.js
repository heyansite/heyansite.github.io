(window.webpackJsonp=window.webpackJsonp||[]).push([[55],{624:function(s,e,o){s.exports=o.p+"assets/img/basic-1.dcc619dc.png"},625:function(s,e,o){"use strict";var t=o(79);o.n(t).a},79:function(s,e,o){},831:function(s,e,o){"use strict";o.r(e);o(625);var t=o(0),n=Object(t.a)({},(function(){var s=this,e=s.$createElement,t=s._self._c||e;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("h1",{attrs:{id:"python-爬虫概述"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#python-爬虫概述"}},[s._v("#")]),s._v(" Python 爬虫概述")]),s._v(" "),t("div",{staticClass:"custom-block tip"},[t("p",{staticClass:"custom-block-title"},[s._v("此文为转载 （通常一篇文章会参考多处，也会添加自己的理解，引用地址如有遗漏，请指出）")]),s._v(" "),t("ul",[t("li",[s._v("https://www.cnblogs.com/sthu/p/8850110.html")]),s._v(" "),t("li",[s._v("https://cuiqingcai.com/")])])]),s._v(" "),t("h2",{attrs:{id:"爬虫的基本流程"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#爬虫的基本流程"}},[s._v("#")]),s._v(" 爬虫的基本流程")]),s._v(" "),t("p",[t("strong",[s._v("发起请求")]),s._v("\n通过HTTP库向目标站点发起请求，也就是发送一个Request，请求可以包含额外的header等信息，等待服务器响应")]),s._v(" "),t("p",[t("strong",[s._v("获取响应内容")]),s._v("\n如果服务器能正常响应，会得到一个Response，Response的内容便是所要获取的页面内容，类型可能是HTML,Json字符串，二进制数据（图片或者视频）等类型")]),s._v(" "),t("p",[t("strong",[s._v("解析内容")]),s._v("\n得到的内容可能是HTML,可以用正则表达式，页面解析库进行解析，可能是Json,可以直接转换为Json对象解析，可能是二进制数据，可以做保存或者进一步的处理")]),s._v(" "),t("p",[t("strong",[s._v("保存数据")]),s._v("\n保存形式多样，可以存为文本，也可以保存到数据库，或者保存特定格式的文件")]),s._v(" "),t("h2",{attrs:{id:"什么是request-response"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#什么是request-response"}},[s._v("#")]),s._v(" 什么是Request,Response")]),s._v(" "),t("p",[s._v("浏览器发送消息给网址所在的服务器，这个过程就叫做HTPP Request"),t("br"),s._v("服务器收到浏览器发送的消息后，能够根据浏览器发送消息的内容，做相应的处理，然后把消息回传给浏览器，这个过程就是HTTP Response;浏览器收到服务器的Response信息后，会对信息进行相应的处理，然后展示")]),s._v(" "),t("h3",{attrs:{id:"request中包含什么？"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#request中包含什么？"}},[s._v("#")]),s._v(" Request中包含什么？")]),s._v(" "),t("h4",{attrs:{id:"请求方式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#请求方式"}},[s._v("#")]),s._v(" "),t("strong",[s._v("请求方式")])]),s._v(" "),t("p",[s._v("主要有：GET/POST两种类型常用，另外还有HEAD/PUT/DELETE/OPTIONS；"),t("br"),s._v("GET和POST的区别就是：请求的数据GET是在url中，POST则是存放在头部")]),s._v(" "),t("ul",[t("li",[s._v("GET:向指定的资源发出“显示”请求。使用GET方法应该只用在读取数据，而不应当被用于产生“副作用”的操作中，例如在Web Application中。其中一个原因是GET可能会被网络蜘蛛等随意访问")]),s._v(" "),t("li",[s._v("POST:向指定资源提交数据，请求服务器进行处理（例如提交表单或者上传文件）。数据被包含在请求本文中。这个请求可能会创建新的资源或修改现有资源，或二者皆有。")]),s._v(" "),t("li",[s._v("HEAD：与GET方法一样，都是向服务器发出指定资源的请求。只不过服务器将不传回资源的本文部分。它的好处在于，使用这个方法可以在不必传输全部内容的情况下，就可以获取其中“关于该资源的信息”（元信息或称元数据）。")]),s._v(" "),t("li",[s._v("PUT：向指定资源位置上传其最新内容。")]),s._v(" "),t("li",[s._v("OPTIONS：这个方法可使服务器传回该资源所支持的所有HTTP请求方法。用'*'来代替资源名称，向Web服务器发送OPTIONS请求，可以测试服务器功能是否正常运作。")]),s._v(" "),t("li",[s._v("DELETE：请求服务器删除Request-URI所标识的资源。")])]),s._v(" "),t("h4",{attrs:{id:"请求url"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#请求url"}},[s._v("#")]),s._v(" "),t("strong",[s._v("请求URL")])]),s._v(" "),t("p",[s._v("URL，即统一资源定位符，也就是我们说的网址，统一资源定位符是对可以从互联网上得到的资源的位置和访问方法的一种简洁的表示，是互联网上标准资源的地址。互联网上的每个文件都有一个唯一的URL，它包含的信息指出文件的位置以及浏览器应该怎么处理它。")]),s._v(" "),t("p",[s._v("URL的格式由三个部分组成：")]),s._v(" "),t("ul",[t("li",[s._v("协议(或称为服务方式)。")]),s._v(" "),t("li",[s._v("存有该资源的主机IP地址(有时也包括端口号)。")]),s._v(" "),t("li",[s._v("主机资源的具体地址，如目录和文件名等。")])]),s._v(" "),t("div",{staticClass:"language-txt line-numbers-mode"},[t("div",{staticClass:"highlight-lines"},[t("br"),t("br"),t("br"),t("br"),t("br"),t("br"),t("br"),t("br"),t("br"),t("div",{staticClass:"highlighted"},[s._v(" ")]),t("br"),t("br"),t("br"),t("br"),t("br"),t("br"),t("br"),t("br"),t("br")]),t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v('# 借用nodejs中URL模块中的一张图：\n┌────────────────────────────────────────────────────────────────────────────────────────────────┐\n│                                              href                                              │\n├──────────┬──┬─────────────────────┬────────────────────────┬───────────────────────────┬───────┤\n│ protocol │  │        auth         │          host          │           path            │ hash  │\n│          │  │                     ├─────────────────┬──────┼──────────┬────────────────┤       │\n│          │  │                     │    hostname     │ port │ pathname │     search     │       │\n│          │  │                     │                 │      │          ├─┬──────────────┤       │\n│          │  │                     │                 │      │          │ │    query     │       │\n"  https:   //    user   :   pass   @ sub.example.com : 8080   /p/a/t/h  ?  query=string   #hash "\n│          │  │          │          │    hostname     │ port │          │                │       │\n│          │  │          │          ├─────────────────┴──────┤          │                │       │\n│ protocol │  │ username │ password │          host          │          │                │       │\n├──────────┴──┼──────────┴──────────┼────────────────────────┤          │                │       │\n│   origin    │                     │         origin         │ pathname │     search     │ hash  │\n├─────────────┴─────────────────────┴────────────────────────┴──────────┴────────────────┴───────┤\n│                                              href                                              │\n└────────────────────────────────────────────────────────────────────────────────────────────────┘\n')])]),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br")])]),t("h4",{attrs:{id:"请求头"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#请求头"}},[s._v("#")]),s._v(" "),t("strong",[s._v("请求头")])]),s._v(" "),t("p",[s._v("包含请求时的头部信息，如User-Agent,Host,Cookies等信息，下图是请求请求百度时，所有的请求头部信息参数")]),s._v(" "),t("div",{staticStyle:{display:"flex"}},[t("img",{staticStyle:{zoom:"150%",display:"block"},attrs:{src:o(624),alt:"",align:"left"}})]),s._v(" "),t("h4",{attrs:{id:"请求体"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#请求体"}},[s._v("#")]),s._v(" 请求体")]),s._v(" "),t("p",[s._v("请求时携带的数据，如提交表单数据时候的表单数据（POST）")]),s._v(" "),t("h3",{attrs:{id:"response中包含了什么"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#response中包含了什么"}},[s._v("#")]),s._v(" Response中包含了什么")]),s._v(" "),t("p",[s._v("所有HTTP响应的第一行都是状态行，依次是当前HTTP版本号，3位数字组成的状态代码，以及描述状态的短语，彼此由空格分隔。")]),s._v(" "),t("h4",{attrs:{id:"响应状态"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#响应状态"}},[s._v("#")]),s._v(" 响应状态")]),s._v(" "),t("p",[s._v("有多种响应状态，如：200代表成功，301跳转，404找不到页面，502服务器错误")]),s._v(" "),t("ul",[t("li",[s._v("1xx消息——请求已被服务器接收，继续处理")]),s._v(" "),t("li",[s._v("2xx成功——请求已成功被服务器接收、理解、并接受")]),s._v(" "),t("li",[s._v("3xx重定向——需要后续操作才能完成这一请求")]),s._v(" "),t("li",[s._v("4xx请求错误——请求含有词法错误或者无法被执行")]),s._v(" "),t("li",[s._v("5xx服务器错误——服务器在处理某个正确请求时发生错误")])]),s._v(" "),t("p",[s._v("常见代码： 200 OK 请求成功 400 Bad Request 客户端请求有语法错误，不能被服务器所理解 401 Unauthorized 请求未经授权，这个状态代码必须和WWW-Authenticate报头域一起使用 403 Forbidden 服务器收到请求，但是拒绝提供服务 404 Not Found 请求资源不存在，eg：输入了错误的URL 500 Internal Server Error 服务器发生不可预期的错误 503 Server Unavailable 服务器当前不能处理客户端的请求，一段时间后可能恢复正常 301 目标永久性转移 302 目标暂时性转移")]),s._v(" "),t("h4",{attrs:{id:"响应头"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#响应头"}},[s._v("#")]),s._v(" 响应头")]),s._v(" "),t("p",[s._v("如内容类型，类型的长度，服务器信息，设置Cookie 等... 看法如上面request header")]),s._v(" "),t("h4",{attrs:{id:"响应体"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#响应体"}},[s._v("#")]),s._v(" 响应体")]),s._v(" "),t("p",[s._v("最主要的部分，包含请求资源的内容，如网页HTMl,图片，二进制数据等")]),s._v(" "),t("h2",{attrs:{id:"session-cookie-token"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#session-cookie-token"}},[s._v("#")]),s._v(" session, cookie, token")]),s._v(" "),t("div",{staticClass:"custom-block tip"},[t("p",{staticClass:"custom-block-title"},[s._v("转载、参考")]),s._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"https://www.sohu.com/a/207801015_114819",target:"_self",rel:"noopener noreferrer"}},[s._v("https://www.sohu.com/a/207801015_114819")])]),s._v(" "),t("li",[t("a",{attrs:{href:"https://www.jianshu.com/p/bd1be47a16c1",target:"_self",rel:"noopener noreferrer"}},[s._v("https://www.jianshu.com/p/bd1be47a16c1")])])]),s._v(" "),t("br")]),s._v(" "),t("p",[t("strong",[s._v("http是一个无状态协议")]),t("br"),s._v("什么是无状态呢？就是说这一次请求和上一次请求是没有任何关系的，互不认识的，没有关联的。这种无状态的的好处是快速。坏处是假如我们想要把"),t("code",[s._v("www.zhihu.com/login.html")]),s._v("和"),t("code",[s._v("www.zhihu.com/index.html")]),s._v("关联起来，必须使用某些手段和工具")]),s._v(" "),t("p",[s._v("由于http的无状态性，为了使某个域名下的所有网页能够共享某些数据，session和cookie出现，cookie与session应用于互联网中的一项基本技术——"),t("strong",[s._v("会话（用户与客户端的交互）跟踪技术")]),s._v("，用来跟踪用户的整个会话。简单来说，cookie是通过在客户端记录信息确定用户身份的，而session则通过在服务器端记录信息确定用户身份。")]),s._v(" "),t("h3",{attrs:{id:"cookie"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#cookie"}},[s._v("#")]),s._v(" cookie")]),s._v(" "),t("p",[s._v("cookie是服务器传给客户端的体积很小的纯文本文件。客户端请求服务器，如果服务器需要记录该用户状态，就向客户端浏览器发一个cookie。客户端浏览器会把cookie保存起来。当浏览器再请求该网站时，浏览器把请求的网址连同该cookie一同提交给服务器。服务器检查该cookie，以此来辨认用户状态。")]),s._v(" "),t("blockquote",[t("p",[t("strong",[s._v("cookie机制")]),s._v(" - cookie的生成（java代码举例）")])]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Cookie")]),s._v(" cookie "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Cookie")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("“key”"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("”value”"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("；\ncookie"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("setMaxAge")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("60")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("； "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//设置cookie的生存期60秒")]),s._v("\ncookie"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("setPath")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("“"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("test”"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("；"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//设置cookie的路径")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br")])]),t("p",[s._v("cookie会附在请求资源的HTTP请求头上发送给服务器，服务器通过相应方法获得该cookie。")]),s._v(" "),t("blockquote",[t("p",[t("strong",[s._v("cookie属性")])])]),s._v(" "),t("p",[s._v("cookie的主要属性包括：名字，值，过期时间，路径和域：")]),s._v(" "),t("ul",[t("li",[s._v("路径与域一起构成cookie的作用范围。")]),s._v(" "),t("li",[s._v("过期时间：对于会话cookie，如果不设置过期时间，表示这个cookie的生命期为浏览器的会话期间，关闭浏览器窗口，cookie就消失了，会话cookie一般保存在内存里。对于持久cookie，设置了过期时间，浏览器会把cookie保存在硬盘上，存储在硬盘上的cookie会在不同的浏览器进程间共享。")]),s._v(" "),t("li",[s._v("名字：就是给cookie起一个名字。")]),s._v(" "),t("li",[s._v("值：cookie中记录的信息内容。")])]),s._v(" "),t("blockquote",[t("p",[t("strong",[s._v("应用场景")])])]),s._v(" "),t("ol",[t("li",[t("strong",[s._v("判断注册用户是否已经登录网站")]),s._v("：用户可能会得到提示，是否在下一次进入此网站时保留用户信息以便简化登录流程。")]),s._v(" "),t("li",[t("strong",[s._v("根据用户的爱好定制内容")]),s._v("：网站创建包含用户浏览内容的cookies，在用户下次访问时，网站根据用户的情况对显示的内容进行调整，将用户感兴趣的内容放在前列。")]),s._v(" "),t("li",[t("strong",[s._v("实现永久登录")]),s._v("：如果用户是在自己家的电脑上上网，登录时就可以记住他的登录信息，下次访问时不需要再次登录，直接访问即可。")]),s._v(" "),t("li",[t("strong",[s._v("实现自动登录")]),s._v("：当用户注册网站后，就会收到一个惟一用户ID的cookie。用户再次连接时，这个用户ID会自动返回，服务器对它进行检查，确定它是否是注册用户且选择了自动登录，从而使用户无需给出明确的用户名和密码，就可以访问服务器上的资源。")]),s._v(" "),t("li",[t("strong",[s._v("使用cookie记录各个用户的访问计数")]),s._v("：获取cookie数组中专门用于统计用户访问次数的cookie的值，将值加1并将最新cookie输出。")]),s._v(" "),t("li",[t("strong",[s._v("使用cookie记住用户名与用户密码")]),s._v("。用户勾选了“自动登录”，就把用户名和密码的信息放到cookie中。同时可设置有效期。")]),s._v(" "),t("li",[t("strong",[s._v("用cookie实现新手大礼包等弹窗功能")]),s._v("。同理，将新手大礼包弹窗逻辑写入到cookie中，并设置相应的有效期。比如在有效期内只弹出一次该弹窗，超过有效期登录后再次弹出弹窗。")])]),s._v(" "),t("blockquote",[t("p",[s._v("特点")])]),s._v(" "),t("ol",[t("li",[s._v("Cookie是将会话中产生的数据存入到"),t("strong",[s._v("浏览器客户端")]),s._v("，属于客户端技术（JS可以访问cookie）")]),s._v(" "),t("li",[s._v("Cookie是将数据保存到浏览器客户端，容易随着用户的操作导致cookie丢失或被窃取，因此cookie中保存的数据不太稳定，也不太安全")]),s._v(" "),t("li",[s._v("cookie中数据存在浏览器中，对服务器端没有太大影响，可以将数据保存很长时间")]),s._v(" "),t("li",[s._v("浏览器对cookie的大小和个数都有限制，一般每个站点给浏览器发送的cookie不超过20个，每个cookie大小不超过1KB")])]),s._v(" "),t("h3",{attrs:{id:"session"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#session"}},[s._v("#")]),s._v(" session")]),s._v(" "),t("p",[s._v("session是另一种记录客户状态的机制，不同的是cookie保存在客户端浏览器中，而session保存在服务器上。客户端浏览器访问服务器的时候，服务器把客户端信息以某种形式记录在服务器上，这就是session。客户端浏览器再次访问时只需要从该session中查找该客户的状态就可以了。"),t("strong",[s._v("session相当于程序在服务器上建立的一份用户的档案，用户来访的时候只需要查询用户档案表就可以了。")])]),s._v(" "),t("blockquote",[t("p",[t("strong",[s._v("session的生命周期与有效期")])])]),s._v(" "),t("p",[s._v("为了获得更高的存取速度，服务器一般把session放在内存里。每个用户都会有一个独立的session。如果session内容过于复杂，当大量客户访问服务器时可能会导致内存溢出。"),t("strong",[s._v("session的使用虽然比cookie方便，但是过多的session存储在服务器内存中，会对服务器造成压力")]),s._v("。因此，session里的信息应该尽量精简。"),t("br"),s._v("session在用户第一次访问服务器的时候自动创建。session生成后，只要用户继续访问，服务器就会更新Session的最后访问时间，并维护该session。"),t("br"),s._v("由于有越来越多的用户访问服务器，因此session也会越来越多。"),t("strong",[s._v("为防止内存溢出，服务器会把长时间内没有活跃的session从内存中删除。这个时间就是session的超时时间。如果超过了超时时间没访问过服务器，session就自动失效了。")])]),s._v(" "),t("h3",{attrs:{id:"session-与-cookie"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#session-与-cookie"}},[s._v("#")]),s._v(" session 与 cookie")]),s._v(" "),t("p",[s._v("虽然session保存在服务器，但是它的正常运行仍然需要客户端浏览器的支持。"),t("strong",[s._v("这是因为session需要使用cookie作为识别标志")]),s._v("。HTTP协议是无状态的，session不能依据HTTP连接来判断是否为同一客户，"),t("strong",[s._v("因此服务器向客户端浏览器发送一个名为SESSIONID的cookie")]),s._v("，它的值为该Session的id。Session依据该cookie来识别是否为同一用户。")]),s._v(" "),t("p",[t("em",[s._v("对于不支持cookie的手机浏览器，有另一种解决方案：URL地址重写。"),t("strong",[s._v("URL地址重写的原理是将该用户session的id信息重写到URL地址中，服务器能够解析重写后的URL获取session的id")]),s._v("。这样即使客户端不支持cookie，也可以使用session来记录用户状态。")])]),s._v(" "),t("blockquote",[t("p",[s._v("应用场景")])]),s._v(" "),t("ol",[t("li",[t("strong",[s._v("通过session累计用户数据")]),s._v("。例如，一个未登录用户访问了京东网站，这个时候京东对其下发了一个 cookie，假设cookie的名字叫做abc，那这条记录就是 abc＝001，同时京东的后台也生成了一个 session id， 它的值也为 001， 001 这个客户在 2 点、 3 点、 4 点分别添加了三件商品到购物车，这样后台也记录了 session id 为 001的用户的购物车里面已经有三件商品，并且只要每次客户端 cookie 带上来的值里面包含session id，后台都能够展示相应的数据，如果这个时候，在浏览器里面清空 cookie，cookie 数据消失之后，后台和客户端无法建立对应关系，购物车的数据就会失效了。")]),s._v(" "),t("li",[t("strong",[s._v("通过session实现单点登录")]),s._v("。一个用户帐号成功登录后，在该次session还未失效之前，不能在其他机器上登录同一个帐号。登录后将用户信息保存到session中，如果此时在另外一台机器上一个相同的帐号请求登录，通过遍历（遍历的意思就是将所有session都查看一遍）Web服务器中所有session并判断其中是否包含同样的用户信息，如果有，在另一台机器上是不能登录该帐号的。")])]),s._v(" "),t("h3",{attrs:{id:"token"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#token"}},[s._v("#")]),s._v(" token")]),s._v(" "),t("p",[s._v("token是用户身份的验证方式，我们通常叫它：令牌。最简单的token组成:uid(用户唯一的身份标识)、time(当前时间的时间戳)、sign(签名，由token的前几位+盐以哈希算法压缩成一定长的十六进制字符串，可以防止恶意第三方拼接token请求服务器)。还可以把不变的参数也放进token，避免多次查库。")]),s._v(" "),t("blockquote",[t("p",[s._v("组成")])]),s._v(" "),t("ul",[t("li",[s._v("uid: 用户唯一身份标识")]),s._v(" "),t("li",[s._v("time: 当前时间的时间戳")]),s._v(" "),t("li",[s._v("sign: 签名, 使用 hash/encrypt 压缩成定长的十六进制字符串，以防止第三方恶意拼接")]),s._v(" "),t("li",[s._v("固定参数(可选): 将一些常用的固定参数加入到 token 中是为了避免重复查库")])]),s._v(" "),t("blockquote",[t("p",[s._v("验证过程")])]),s._v(" "),t("p",[s._v("基于Token的身份验证的过程如下: （与 cookie+session 类似）")]),s._v(" "),t("ol",[t("li",[s._v("用户通过用户名和密码发送请求。")]),s._v(" "),t("li",[s._v("程序验证。")]),s._v(" "),t("li",[s._v("程序返回一个签名的token 给客户端。")]),s._v(" "),t("li",[s._v("客户端储存token,并且每次用于每次发送请求。")]),s._v(" "),t("li",[s._v("服务端验证token并返回数据。")])]),s._v(" "),t("blockquote",[t("p",[s._v("应用场景：")])]),s._v(" "),t("p",[s._v("A：当用户首次登录成功（注册也是一种可以适用的场景）之后, 服务器端就会生成一个 token 值，这个值，会在服务器保存token值(保存在数据库中)，再将这个token值返回给客户端."),t("br"),s._v("B：客户端拿到 token 值之后,进行本地保存。（SP存储是大家能够比较支持和易于理解操作的存储）"),t("br"),s._v("C：当客户端再次发送网络请求(一般不是登录请求)的时候,就会将这个 token 值附带到参数中发送给服务器."),t("br"),s._v("D：服务器接收到客户端的请求之后,会取出token值与保存在本地(数据库)中的token值做对比")]),s._v(" "),t("p",[s._v("对比一：如果两个 token 值相同， 说明用户登录成功过!当前用户处于登录状态!"),t("br"),s._v("对比二：如果没有这个 token 值, 则说明没有登录成功."),t("br"),s._v("对比三：如果 token 值不同: 说明原来的登录信息已经失效,让用户重新登录.")]),s._v(" "),t("blockquote",[t("p",[s._v("Token优势")])]),s._v(" "),t("ul",[t("li",[t("p",[s._v("无状态、可扩展"),t("br"),s._v("在客户端存储的Tokens是无状态的，并且能够被扩展。基于这种无状态和不存储Session信息，负载负载均衡器能够将用户信息从一个服务传到其他服务器上。（"),t("em",[s._v("如果我们将已验证的用户的信息保存在Session中，则每次请求都需要用户向已验证的服务器发送验证信息(称为Session亲和性)。用户量大时，可能会造成拥堵")]),s._v("）")])]),s._v(" "),t("li",[t("p",[s._v("安全性"),t("br"),s._v("请求中发送token而不再是发送cookie能够防止CSRF(跨站请求伪造)")]),s._v(" "),t("blockquote",[t("p",[s._v("假如用户正在登陆银行网页，同时登陆了攻击者的网页，并且银行网页未对csrf攻击进行防护。攻击者就可以在网页放一个表单，该表单提交src为"),t("code",[s._v("http://www.bank.com/api/transfer")]),s._v("，body为"),t("code",[s._v("count=1000&to=Tom")]),s._v("。倘若是session+cookie，用户打开网页的时候就已经转给Tom1000元了.因为form 发起的 POST 请求并不受到浏览器同源策略的限制，因此可以任意地使用其他域的 Cookie 向其他域发送 POST 请求，形成 CSRF 攻击。在post请求的瞬间，cookie会被浏览器自动添加到请求头中。但token不同，token是开发者为了防范csrf而特别设计的令牌，浏览器不会自动添加到headers里，攻击者也无法访问用户的token，所以提交的表单无法通过服务器过滤，也就无法形成攻击。")])])]),s._v(" "),t("li",[t("p",[s._v("可扩展性")])]),s._v(" "),t("li",[t("p",[s._v("多平台跨域"),t("br"),s._v("只要用户有一个通过了验证的token，数据和资源就能够在任何域上被请求到。")])]),s._v(" "),t("li",[t("p",[s._v("基于标准")])])]),s._v(" "),t("h3",{attrs:{id:"分布式情况下的session和token"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#分布式情况下的session和token"}},[s._v("#")]),s._v(" 分布式情况下的session和token")]),s._v(" "),t("p",[s._v("我们已经知道session时有状态的，一般存于服务器内存或硬盘中，当服务器采用分布式或集群时，session就会面对负载均衡问题。")]),s._v(" "),t("ul",[t("li",[t("p",[s._v("负载均衡多服务器的情况，不好确认当前用户是否登录，因为多服务器不共享session。这个问题也可以将session存在一个服务器中来解决，但是就不能完全达到负载均衡的效果。当今的几种"),t("a",{attrs:{href:"http://blog.51cto.com/zhibeiwang/1965018",target:"_self",rel:"noopener noreferrer"}},[s._v("解决session负载均衡")]),s._v("的方法。")]),s._v(" "),t("blockquote",[t("p",[s._v("从用户端来解释，就是当一个用户第一次访问被负载均衡代理到后端服务器A并登录后，服务器A上保留了用户的登录信息；当用户再次发送请求时，根据负载均衡策略可能被代理到后端不同的服务器，例如服务器B，由于这台服务器B没有用户的登录信息，所以导致用户需要重新登录。这对用户来说是不可忍受的。所以，在实施负载均衡的时候，我们必须考虑Session的问题。")]),s._v(" "),t("br"),s._v(" "),t("p",[s._v("在负载均衡中，针对Session的处理，我们一般有以下几种方法：")]),s._v(" "),t("ul",[t("li",[s._v("Session 保持（案例：Nginx、Haproxy）")]),s._v(" "),t("li",[s._v("Session 复制（案例：Tomcat）")]),s._v(" "),t("li",[s._v("Session 共享（案例：Memcached、Redis）")])])])])]),s._v(" "),t("p",[s._v("而token是无状态的，token字符串里就保存了所有的用户信息")]),s._v(" "),t("ul",[t("li",[s._v("客户端登陆传递信息给服务端，服务端收到后把用户信息加密（token）传给客户端，客户端将token存放于localStroage等容器中。客户端每次访问都传递token，服务端解密token，就知道这个用户是谁了。通过cpu加解密，服务端就不需要存储session占用存储空间，就很好的解决负载均衡多服务器的问题了。这个方法叫做["),t("strong",[s._v("JWT(Json Web Token)")]),s._v("]")])]),s._v(" "),t("h3",{attrs:{id:"总结"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[s._v("#")]),s._v(" 总结")]),s._v(" "),t("ul",[t("li",[s._v("session存储于服务器，可以理解为一个状态列表，拥有一个唯一识别符号sessionId，通常存放于cookie中。服务器收到cookie后解析出sessionId，再去session列表中查找，才能找到相应session。依赖cookie")]),s._v(" "),t("li",[s._v("cookie类似一个令牌，装有sessionId，存储在客户端，浏览器通常会自动添加。")]),s._v(" "),t("li",[s._v("token也类似一个令牌，无状态，用户信息都被加密到token中，服务器收到token后解密就可知道是哪个用户。需要开发者手动添加。")]),s._v(" "),t("li",[s._v("jwt只是一个跨域认证的方案")])]),s._v(" "),t("h2",{attrs:{id:"python爬虫主要知识点"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#python爬虫主要知识点"}},[s._v("#")]),s._v(" Python爬虫主要知识点")]),s._v(" "),t("p",[t("strong",[s._v("1\t请求 -")]),s._v(" Urllib / "),t("strong",[s._v("Requests")])]),s._v(" "),t("p",[t("strong",[s._v("2\t解析 -")]),s._v(" "),t("strong",[s._v("BeautifulSoup")]),s._v("库 / "),t("strong",[s._v("XPath")]),s._v(" / "),t("strong",[s._v("正则表达式")]),s._v(" / PyQuery / Json解析 (如果返回的是Json数据)...")]),s._v(" "),t("p",[t("strong",[s._v("3\t解决javascript渲染的问题")]),s._v(" - "),t("strong",[s._v("Selenium库")]),s._v(" / 分析ajax / Splash / PyV8...")]),s._v(" "),t("p",[t("strong",[s._v("4\tAdvanced -")]),s._v(" "),t("strong",[s._v("动态代理池")]),s._v(" "),t("strong",[s._v("/")]),s._v(" "),t("strong",[s._v("动态Cookies池 ...")])]),s._v(" "),t("p",[t("strong",[s._v("5\t框架 -")]),s._v(" "),t("strong",[s._v("PySpider")]),s._v(" "),t("strong",[s._v("/")]),s._v(" "),t("strong",[s._v("Scrapy")])]),s._v(" "),t("p",[t("strong",[s._v("6\t其他 -")]),s._v(" 验证码 ...")]),s._v(" "),t("p",[t("strong",[s._v("7\t数据保存 -")]),s._v(" 文本：纯文本，Json,Xml等"),t("br"),s._v("\t\t关系型数据库：如mysql,oracle,sql server等结构化数据库"),t("br"),s._v("\t\t非关系型数据库：MongoDB,Redis等key-value形式存储")])])}),[],!1,null,"47d3d614",null);e.default=n.exports}}]);